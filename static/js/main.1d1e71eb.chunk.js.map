{"version":3,"sources":["services/model-builder.ts","services/calculation.ts","store/actions.ts","store/solution-context.ts","features/calculation/CalculationCard.tsx","features/calculation/ResultCard.tsx","hooks/index.ts","store/app-context.ts","components/ValidInput.tsx","features/constraint/Constraint.tsx","features/constraint/ConstraintsDialog.tsx","features/ingredient/IngredientDialog.tsx","features/ingredient/Ingredients.tsx","store/reducers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ModelBuilder","solution","optimize","opType","constraints","variables","coefficients","sources","Object","assign","weight","equal","Number","rules","capacity","unlimitedCapacity","min","max","chemicalConstraints","boundaryConstraints","unlimitedIngredients","merge","map","v","ingredient","name","c","composition","id","chemicalCoefficients","variable","cmp","find","i","chemical","value","remain","pertPercentage","price","calculateConstraints","result","comp","reduce","a","b","solve","length","status","cost","model","buildModel","Solver","Solve","feasible","SolutionProvider","createContext","store","allowShrinkBase","looseConstraints","preferWightOverChemicals","dispatch","action","useSolution","useContext","CalculationCard","props","onSolveCb","useCallback","type","payload","style","flexShrink","width","label","labelFor","inline","float","clear","toString","onChange","target","disabled","fill","onClick","openConstraints","margin","checked","event","className","Classes","DIALOG_FOOTER_ACTIONS","intent","ResultCard","cellRenderer","rowIndex","columnIndex","fontSize","correctCellRenderer","isSatisfied","icon","IconNames","TICK","CROSS","CIRCLE","numRows","enableRowResizing","defaultRowHeight","enableRowHeader","enableColumnResizing","columnWidths","useDialog","initialIsOpen","useState","data","setData","isOpen","setIsOpen","open","close","reset","undefined","useMemo","AppProvider","chemicals","useApp","ValidInput","error","warning","inputProps","hasError","hasWarning","content","Constraint","index","onDeleteCb","onDelete","compareStyle","color","alignSelf","padding","display","text","onClickChemical","ConstraintsDialog","deleteConstraint","addConstraint","chemicalDialog","onClose","minHeight","DIALOG_BODY","arr","title","canOutsideClickClose","canEscapeKeyClose","item","textAlign","DIALOG_FOOTER","IngredientDialog","initialState","prev","setPrev","draft","setDraft","setEntity","key","prevState","confirm","discard","state","useDraftForm","useEffect","flexDirection","countable","unitWeight","contentClassName","FLEX_EXPANDER","onApply","Ingredients","selected","setSelected","newPlaceholder","setNewPlaceholder","editIngredientDialog","deleteIngredients","findIndex","editIngredientDialog_open","addIngredient","val","propName","editable","amount","onSelection","selectedRegions","flatMap","region","rows","start","end","slice","height","flex","reducer","splice","filter","_","includes","App","constraintsDialog","useReducer","dispatchSolution","app","dispatchApp","Provider","flexGrow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d1e71eb.chunk.js","sourcesContent":["import { ConstraintModel, Solution, Variable } from \"../models/state-model\"\n\nexport class ModelBuilder {\n   private static merge(sources: any[]) {\n      return Object.assign({}, ...sources)\n   }\n\n   static constraints = (solution: Solution) => {\n      return {\n         weight: { equal: Number(solution.rules.weight) },\n         capacity: solution.rules.unlimitedCapacity\n            ? { min: 0 }\n            : { max: Number(solution.rules.capacity) },\n         ...ModelBuilder.chemicalConstraints(\n            solution.constraints,\n            Number(solution.rules.weight)\n         ),\n         ...ModelBuilder.boundaryConstraints(\n            solution.variables,\n            solution.rules.unlimitedIngredients\n         ),\n      }\n   }\n\n   static boundaryConstraints = (\n      variables: Variable[],\n      unlimitedIngredients?: boolean\n   ) => {\n      return ModelBuilder.merge(\n         variables.map((v) => ({\n            [v.ingredient.name]: unlimitedIngredients\n               ? { min: Number(v.min) }\n               : { min: Number(v.min), max: Number(v.max) },\n         }))\n      )\n   }\n\n   static chemicalConstraints = (\n      constraints: ConstraintModel[],\n      weight: number\n   ) => {\n      return ModelBuilder.merge(\n         constraints.map((c) => ({\n            [`${c.composition!.id}_min`]: {\n               min: 0,\n            },\n            [`${c.composition!.id}_max`]: {\n               max: 0,\n            },\n         }))\n      )\n   }\n\n   static chemicalCoefficients = (\n      constraints: ConstraintModel[],\n      variable: Variable\n   ) => {\n      return ModelBuilder.merge(\n         constraints.map((c) => {\n            const cmp =\n               Number(\n                  variable.ingredient.composition.find(\n                     (i) => i.chemical.id === c.composition!.id\n                  )?.value\n               ) ?? 0\n            const remain = 1 - Number(variable.ingredient.pertPercentage) / 100\n            return {\n               [`${c.composition!.id}_min`]: (cmp - Number(c.min)) * remain,\n               [`${c.composition!.id}_max`]: (cmp - Number(c.max)) * remain,\n            }\n         })\n      )\n   }\n\n   static coefficients = (\n      constraints: ConstraintModel[],\n      variables: Variable[]\n   ) => {\n      return ModelBuilder.merge(\n         variables.map((v) => ({\n            [v.ingredient.name]: {\n               [v.ingredient.name]: 1,\n               weight: 1 - Number(v.ingredient.pertPercentage) / 100,\n               capacity: 1,\n               cost: v.ingredient.price,\n               ...ModelBuilder.chemicalCoefficients(constraints, v),\n            },\n         }))\n      )\n   }\n\n   buildModel(solution: Solution) {\n      return {\n         optimize: \"cost\",\n         opType: \"min\",\n         constraints: ModelBuilder.constraints(solution),\n         variables: ModelBuilder.coefficients(\n            solution.constraints,\n            solution.variables\n         ),\n      }\n   }\n}\n","import Solver from \"javascript-lp-solver\"\nimport {\n   ConstraintModel,\n   Result,\n   Solution,\n   Variable\n} from \"../models/state-model\"\nimport { ModelBuilder } from \"./model-builder\"\n\nexport const calculateConstraints = (\n   constraints: ConstraintModel[],\n   variables: Variable[],\n   weight: number,\n   result: any\n) => {\n   return constraints.map(\n      (c) =>\n         variables\n            .map((v) => {\n               const comp =\n                  Number(\n                     v.ingredient.composition.find(\n                        (i) => i.chemical.id === c.composition!.id\n                     )?.value\n                  ) ?? 0\n               return (\n                  (result[v.ingredient.name] ?? 0) *\n                  (1 - Number(v.ingredient.pertPercentage) / 100) *\n                  comp\n               )\n            })\n            .reduce((a, b) => a + b) / weight\n   )\n}\n\nexport const optimize = (solution: Solution): Result => {\n   if (!solution.variables.length)\n      return {\n         status: \"infeasible\",\n         cost: 0,\n         weight: 0,\n         variables: [],\n         constraints: [],\n      }\n   const model = new ModelBuilder().buildModel(solution)\n   const result = Solver.Solve(model)\n   return result.feasible\n      ? {\n           status: \"solved\",\n           cost: result.result,\n           weight: solution.variables\n              .map(\n                 (v) =>\n                    (result[v.ingredient.name] ?? 0) *\n                    (1 - Number(v.ingredient.pertPercentage) / 100)\n              )\n              .reduce((a, b) => a + b),\n           variables: solution.variables.map(\n              (v) => result[v.ingredient.name] ?? 0\n           ),\n           constraints: calculateConstraints(\n              solution.constraints,\n              solution.variables,\n              Number(solution.rules.weight),\n              result\n           ),\n        }\n      : {\n           status: \"infeasible\",\n           cost: 0,\n           weight: 0,\n           variables: solution.variables.map((v) => \"\"),\n           constraints: solution.constraints.map((v) => \"\"),\n        }\n}\n","import { Solution } from \"../models/state-model\"\nimport { optimize } from \"../services/calculation\"\n\nexport const solve = (solution: Readonly<Solution>) => optimize(solution)\n","import { createContext, useContext } from \"react\"\nimport { Solution } from \"../models/state-model\"\n\nexport const init = () =>\n   ({\n      status: \"unsolved\",\n      cost: 0,\n      constraints: [],\n      variables: [],\n      weight: 0,\n      capacity: 0,\n      rules: {\n         weight: 500,\n         capacity: 5000,\n         unlimitedCapacity: false,\n         unlimitedIngredients: false,\n         allowShrinkBase: false,\n         looseConstraints: false,\n         preferWightOverChemicals: false,\n      },\n   } as Solution)\n\nexport const SolutionProvider = createContext({\n   store: init(),\n   dispatch: (action: { type: string; payload?: any }) => {},\n})\n\nexport const useSolution = () => useContext(SolutionProvider)\n","import {\n   Button,\n   Card,\n   Classes,\n   Divider,\n   FormGroup,\n   InputGroup,\n   Switch,\n} from \"@blueprintjs/core\"\nimport React, { useCallback } from \"react\"\nimport { solve } from \"../../store/actions\"\nimport { useSolution } from \"../../store/solution-context\"\n\nexport const CalculationCard = (props: { openConstraints?: () => void }) => {\n   const { store, dispatch } = useSolution()\n   const {\n      status,\n      rules: { weight, capacity, unlimitedCapacity },\n   } = store\n   const onSolveCb = useCallback(() => {\n      dispatch({ type: \"SOLVE\", payload: solve(store) })\n   }, [dispatch, store])\n   return (\n      <Card style={{ flexShrink: 0 }}>\n         <div style={{ width: \"max-content\" }}>\n            <FormGroup\n               label=\"Weight\"\n               labelFor=\"weight\"\n               inline\n               style={{ float: \"right\", clear: \"both\" }}\n            >\n               <InputGroup\n                  id=\"weight\"\n                  value={weight.toString()}\n                  onChange={({ target: { value } }) => {\n                     dispatch({ type: \"SET_RULES\", payload: { weight: value } })\n                  }}\n               />\n            </FormGroup>\n            <FormGroup\n               label=\"Capacity\"\n               labelFor=\"capacity\"\n               disabled={unlimitedCapacity}\n               inline\n               style={{ float: \"right\", clear: \"both\" }}\n            >\n               <InputGroup\n                  id=\"capacity\"\n                  disabled={unlimitedCapacity}\n                  value={capacity.toString()}\n                  onChange={({ target: { value } }) => {\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { capacity: value },\n                     })\n                  }}\n               />\n            </FormGroup>\n         </div>\n         <Button fill onClick={props.openConstraints}>\n            Edit Constraints\n         </Button>\n         <div style={{ margin: \"10px 0\" }}>\n            <Card>\n               <Switch\n                  label=\"Allow to shrink base\"\n                  checked={store.rules.allowShrinkBase}\n                  onChange={(event: any) => {\n                     const { checked } = event.target\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { allowShrinkBase: checked },\n                     })\n                  }}\n               />\n               <Switch\n                  label=\"Loose constraints\"\n                  checked={store.rules.looseConstraints}\n                  onChange={(event: any) => {\n                     const { checked } = event.target\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { looseConstraints: checked },\n                     })\n                  }}\n               />\n               <Switch\n                  label=\"Prefer correct constraints over correct wight\"\n                  disabled={\n                     !store.rules.allowShrinkBase ||\n                     !store.rules.looseConstraints\n                  }\n                  checked={store.rules.preferWightOverChemicals}\n                  onChange={(event: any) => {\n                     const { checked } = event.target\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { preferWightOverChemicals: checked },\n                     })\n                  }}\n               />\n               <Divider />\n               <Switch\n                  label=\"Unlimited capacity\"\n                  checked={store.rules.unlimitedCapacity}\n                  onChange={(event: any) => {\n                     const { checked } = event.target\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { unlimitedCapacity: checked },\n                     })\n                  }}\n               />\n               <Switch\n                  label=\"Unlimited materials\"\n                  checked={store.rules.unlimitedIngredients}\n                  onChange={(event: any) => {\n                     const { checked } = event.target\n                     dispatch({\n                        type: \"SET_RULES\",\n                        payload: { unlimitedIngredients: checked },\n                     })\n                  }}\n               />\n            </Card>\n         </div>\n         <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button\n               intent=\"primary\"\n               disabled={status === \"solved\"}\n               onClick={onSolveCb}\n            >\n               Solve\n            </Button>\n         </div>\n      </Card>\n   )\n}\n","import { Callout, Icon, Label } from \"@blueprintjs/core\"\nimport { IconNames } from \"@blueprintjs/icons\"\nimport { Cell, CellRenderer, Column, Table2 } from \"@blueprintjs/table\"\nimport React, { useCallback } from \"react\"\nimport { useSolution } from \"../../store/solution-context\"\n\nexport const ResultCard = () => {\n   const {\n      store: { status, cost, weight, constraints },\n   } = useSolution()\n   const cellRenderer = useCallback<CellRenderer>(\n      (rowIndex, columnIndex) => {\n         const v = constraints[rowIndex]\n         let value: string = \"\"\n         switch (columnIndex) {\n            case 0:\n               value = `${v.min} ≤ ${v.composition?.name ?? \"\"} ≤ ${v.max}`\n               break\n            case 1:\n               value = v.value?.toString() ?? \"\"\n               break\n         }\n         return <Cell style={{ fontSize: \"11pt\" }}>{value}</Cell>\n      },\n      [constraints]\n   )\n   const correctCellRenderer = useCallback<CellRenderer>(\n      (rowIndex) => {\n         const v = constraints[rowIndex]\n         return (\n            <Cell style={{ fontSize: \"11pt\" }}>\n               {v.isSatisfied ? (\n                  <Icon intent=\"success\" icon={IconNames.TICK} />\n               ) : (\n                  <Icon intent=\"danger\" icon={IconNames.CROSS} />\n               )}\n            </Cell>\n         )\n      },\n      [constraints]\n   )\n   return (\n      <Callout\n         icon={status === \"solved\" ? IconNames.TICK : IconNames.CIRCLE}\n         intent={status === \"solved\" ? \"success\" : \"warning\"}\n      >\n         {status === \"solved\" && (\n            <div>\n               <Label>{`Cost: ${cost} (${\n                  Number(cost) / Number(weight)\n               }/unit)`}</Label>\n               <Label>{` Weight: ${weight}`}</Label>\n               <Table2\n                  numRows={constraints.length}\n                  enableRowResizing={false}\n                  defaultRowHeight={25}\n                  enableRowHeader={false}\n                  enableColumnResizing={false}\n                  columnWidths={[null, null, 40]}\n               >\n                  <Column name=\"Constraint\" cellRenderer={cellRenderer} />\n                  <Column name=\"Amount\" cellRenderer={cellRenderer} />\n                  <Column name=\"\" cellRenderer={correctCellRenderer} />\n               </Table2>\n            </div>\n         )}\n         {status === \"unsolved\" && \"Press Solve button.\"}\n         {status === \"infeasible\" &&\n            \"The problem is unsolvable. Try again after changing constraints or rules.\"}\n      </Callout>\n   )\n}\n","import { useCallback, useMemo, useState } from \"react\"\n\nexport const useDialog = <T = any>(initialIsOpen: boolean = false) => {\n   const [data, setData] = useState<T | undefined>()\n   const [isOpen, setIsOpen] = useState(initialIsOpen)\n   const open = useCallback(\n      (data?: T) => {\n         setIsOpen(true)\n         setData(data)\n      },\n      [setIsOpen]\n   )\n   const close = useCallback(() => {\n      setIsOpen(false)\n   }, [setIsOpen])\n   const reset = useCallback(() => {\n      setIsOpen(false)\n      setData(undefined)\n   }, [setIsOpen, setData])\n   return useMemo(\n      () => ({ isOpen, data, open, close, reset }),\n      [isOpen, data, open, close, reset]\n   )\n}\n\nexport const useDraftInput = (\n   initialValue: string,\n   mutateOnConfirm: (value: string) => string\n) => {\n   const [prev, setPrev] = useState(initialValue)\n   const [draft, setDraft] = useState(initialValue)\n   const confirm = useCallback(\n      () => setPrev(mutateOnConfirm(draft)),\n      [draft, mutateOnConfirm, setPrev]\n   )\n   const discard = useCallback(() => setDraft(prev), [prev, setDraft])\n   return [draft, setDraft, confirm, discard, prev]\n}\n\nexport const useDraftForm = <T extends {}>(initialState?: T | (() => T)) => {\n   const [prev, setPrev] = useState(initialState)\n   const [draft, setDraft] = useState(initialState)\n   const setEntity = useCallback(\n      <K extends keyof T>(key: K, value: T[K]) =>\n         setDraft((prevState) => prevState && { ...prevState, [key]: value }),\n      [setDraft]\n   )\n   const confirm = useCallback(() => setPrev(draft), [draft, setPrev])\n   const discard = useCallback(() => setDraft(prev), [prev, setDraft])\n   const reset = useCallback(\n      (state?: T) => {\n         setPrev(state)\n         setDraft(state)\n      },\n      [setPrev, setDraft]\n   )\n   return useMemo(\n      () => ({\n         draft,\n         setEntity,\n         confirm,\n         discard,\n         reset,\n         prev,\n      }),\n      [draft, setEntity, confirm, discard, reset, prev]\n   )\n}\n","import { createContext, useContext } from \"react\"\nimport { Chemical } from \"../models/state-model\"\n\nexport const init = () => ({\n   chemicals: [\n      {\n         id: \"c\",\n         name: \"C\",\n      },\n      {\n         id: \"fe\",\n         name: \"Fe\",\n      },\n      {\n         id: \"si\",\n         name: \"Si\",\n      },\n      {\n         id: \"mg\",\n         name: \"Mg\",\n      },\n      {\n         id: \"mn\",\n         name: \"Mn\",\n      },\n      {\n         id: \"ni\",\n         name: \"Ni\",\n      },\n   ] as Chemical[],\n})\n\nexport const AppProvider = createContext({\n   store: init(),\n   dispatch: (action: { type: string; payload?: any }) => {},\n})\n\nexport const useApp = () => useContext(AppProvider)\n","import { InputGroup, InputGroupProps2, Tooltip } from \"@blueprintjs/core\"\nimport React from \"react\"\n\nexport const ValidInput = (\n   props: {\n      error?: string\n      warning?: string\n   } & Omit<InputGroupProps2, \"intent\">\n) => {\n   const { error, warning, ...inputProps } = props\n   const hasError = !!error\n   const hasWarning = !!warning\n   const intent = (hasError && \"danger\") || (hasWarning && \"warning\") || \"none\"\n   return (\n      <Tooltip\n         disabled={!hasError && !hasWarning}\n         content={error || warning}\n         intent={intent}\n      >\n         <InputGroup {...inputProps} intent={intent} />\n      </Tooltip>\n   )\n}\n","import { Button } from \"@blueprintjs/core\"\nimport React, { useCallback } from \"react\"\nimport { ValidInput } from \"../../components/ValidInput\"\nimport { Chemical } from \"../../models/state-model\"\nimport { useSolution } from \"../../store/solution-context\"\n\nexport const Constraint = (props: {\n   index: number\n   onClickChemical?: (chemical?: Chemical) => void\n   onDelete?: (index: number) => void\n}) => {\n   const {\n      store: { constraints },\n      dispatch,\n   } = useSolution()\n   const { min, max, composition } = constraints[props.index]\n   const { onDelete: onDeleteCb, index } = props\n   const onDelete = useCallback(() => onDeleteCb?.(index), [onDeleteCb, index])\n   const error =\n      min <= max ? \"\" : \"Min value must be less or equal than Max value\"\n   const compareStyle = {\n      color: \"dimgray\",\n      width: \"fit-content\",\n      alignSelf: \"center\",\n      padding: \"0 3px\",\n   }\n   return (\n      <div style={{ display: \"flex\" }}>\n         <ValidInput\n            error={error}\n            value={min.toString()}\n            onChange={({ target: { value } }) =>\n               dispatch({\n                  type: \"EDIT_CONSTRAINT\",\n                  payload: {\n                     index,\n                     data: {\n                        min: value,\n                     },\n                  },\n               })\n            }\n         />\n         <span style={compareStyle}>&#10092;</span>\n         <Button\n            text={composition?.name ?? \"...\"}\n            style={{ width: \"150px\" }}\n            onClick={() => props.onClickChemical?.(composition)}\n         />\n         <span style={compareStyle}>&#10092;</span>\n         <ValidInput\n            error={error}\n            value={max.toString()}\n            onChange={({ target: { value } }) =>\n               dispatch({\n                  type: \"EDIT_CONSTRAINT\",\n                  payload: {\n                     index,\n                     data: {\n                        max: value,\n                     },\n                  },\n               })\n            }\n         />\n         <span style={{ padding: \"0 3px\" }} />\n         <Button text=\"Delete\" intent=\"danger\" onClick={onDelete} />\n      </div>\n   )\n}\n","import {\n   Button,\n   Classes,\n   Dialog,\n   Divider,\n   Menu,\n   MenuItem,\n} from \"@blueprintjs/core\"\nimport React, { useCallback } from \"react\"\nimport { useDialog } from \"../../hooks\"\nimport { useApp } from \"../../store/app-context\"\nimport { useSolution } from \"../../store/solution-context\"\nimport { Constraint } from \"./Constraint\"\n\nlet id = 1\n\nexport const ConstraintsDialog = (props: {\n   isOpen?: boolean\n   onClose?: () => void\n}) => {\n   const {\n      store: { chemicals },\n   } = useApp()\n   const {\n      store: { constraints },\n      dispatch,\n   } = useSolution()\n   const deleteConstraint = useCallback(\n      (index: number) =>\n         dispatch({ type: \"REMOVE_CONSTRAINT\", payload: index }),\n      [dispatch]\n   )\n   const addConstraint = useCallback(\n      () =>\n         dispatch({\n            type: \"ADD_CONSTRAINT\",\n            payload: {\n               id: `${id++}`,\n               isSatisfied: false,\n               composition: chemicals[0],\n               max: 0,\n               min: 0,\n            },\n         }),\n      [chemicals, dispatch]\n   )\n   const chemicalDialog = useDialog()\n   return (\n      <div>\n         <Dialog\n            isOpen={chemicalDialog.isOpen}\n            onClose={chemicalDialog.close}\n            style={{ width: \"250px\", minHeight: \"400px\" }}\n         >\n            <div className={Classes.DIALOG_BODY}>\n               <Menu>\n                  {chemicals.map((v, i, arr) => (\n                     <div>\n                        <MenuItem\n                           text={v.name}\n                           onClick={() => {\n                              dispatch({\n                                 type: \"EDIT_CONSTRAINT\",\n                                 payload: {\n                                    index: chemicalDialog.data,\n                                    data: {\n                                       composition: v,\n                                    },\n                                 },\n                              })\n                              chemicalDialog.close()\n                           }}\n                        />\n                        {i !== arr.length - 1 && <Divider />}\n                     </div>\n                  ))}\n               </Menu>\n            </div>\n         </Dialog>\n         <Dialog\n            title=\"Edit Constraints\"\n            isOpen={props.isOpen}\n            onClose={props.onClose}\n            canOutsideClickClose={false}\n            canEscapeKeyClose={false}\n            style={{ width: \"600px\", minHeight: \"350px\" }}\n         >\n            <div className={Classes.DIALOG_BODY}>\n               {constraints.length ? (\n                  constraints.map((item, i, arr) => {\n                     return (\n                        <div key={item.id}>\n                           <Constraint\n                              index={i}\n                              onDelete={deleteConstraint}\n                              onClickChemical={() => chemicalDialog.open(i)}\n                           />\n                           {i !== arr.length - 1 && <Divider />}\n                        </div>\n                     )\n                  })\n               ) : (\n                  <span\n                     style={{\n                        textAlign: \"center\",\n                        color: \"dimgray\",\n                        display: \"block\",\n                     }}\n                  >\n                     - no constraints -\n                  </span>\n               )}\n            </div>\n            <div className={Classes.DIALOG_FOOTER}>\n               <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                  {constraints.length ? undefined : (\n                     <span style={{ color: \"dimgray\", alignSelf: \"center\" }}>\n                        Press to add first constraint\n                     </span>\n                  )}\n                  <Button\n                     text=\"Add\"\n                     intent=\"primary\"\n                     style={{ width: \"80px\" }}\n                     onClick={addConstraint}\n                  />\n               </div>\n            </div>\n         </Dialog>\n      </div>\n   )\n}\n","import {\n   Button,\n   Classes,\n   Dialog,\n   FormGroup,\n   InputGroup,\n   Switch,\n} from \"@blueprintjs/core\"\nimport { Cell, Column, EditableCell2, Table2 } from \"@blueprintjs/table\"\nimport React, { useEffect } from \"react\"\nimport { useDraftForm } from \"../../hooks\"\nimport { Ingredient } from \"../../models/state-model\"\n\nexport const IngredientDialog = (props: {\n   data?: Ingredient\n   isOpen?: boolean\n   onClose?: () => void\n   onApply?: (ingredient: Ingredient) => void\n}) => {\n   const { data } = props\n   const { draft, setEntity, reset } = useDraftForm(data)\n   useEffect(() => {\n      reset(data)\n   }, [data, reset])\n   return (\n      <Dialog\n         title=\"Edit Ingredients\"\n         isOpen={props.isOpen}\n         onClose={props.onClose}\n         canOutsideClickClose={false}\n         canEscapeKeyClose={false}\n         style={{ width: \"600px\" }}\n      >\n         <div className={Classes.DIALOG_BODY}>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n               <div style={{ flexShrink: 0 }}>\n                  <FormGroup label=\"Name\" labelFor=\"name\">\n                     <InputGroup\n                        id=\"name\"\n                        value={draft?.name}\n                        onChange={({ target: { value } }) => {\n                           setEntity(\"name\", value)\n                        }}\n                     />\n                  </FormGroup>\n                  <FormGroup label=\"Price\" labelFor=\"price\">\n                     <InputGroup\n                        id=\"price\"\n                        value={draft?.price?.toString()}\n                        onChange={({ target: { value } }) => {\n                           setEntity(\"price\", value)\n                        }}\n                     />\n                  </FormGroup>\n                  <FormGroup label=\"Content\" labelFor=\"content\">\n                     <InputGroup\n                        id=\"content\"\n                        value={draft?.content?.toString()}\n                        onChange={({ target: { value } }) => {\n                           setEntity(\"content\", value)\n                        }}\n                     />\n                  </FormGroup>\n                  <FormGroup label=\"Pert Percentage\" labelFor=\"pertPercentage\">\n                     <InputGroup\n                        id=\"pertPercentage\"\n                        value={draft?.pertPercentage?.toString()}\n                        onChange={({ target: { value } }) => {\n                           setEntity(\"pertPercentage\", value)\n                        }}\n                     />\n                  </FormGroup>\n                  <Switch\n                     label=\"Countable\"\n                     checked={draft?.countable}\n                     onChange={(event: any) => {\n                        setEntity(\"countable\", event.target.checked)\n                     }}\n                  />\n                  <FormGroup label=\"Unit Weight\" labelFor=\"unitWeight\">\n                     <InputGroup\n                        id=\"unitWeight\"\n                        value={draft?.unitWeight?.toString()}\n                        onChange={({ target: { value } }) => {\n                           setEntity(\"unitWeight\", value)\n                        }}\n                     />\n                  </FormGroup>\n               </div>\n               <span style={{ width: \"15px\" }} />\n               <FormGroup\n                  label=\"Composition\"\n                  style={{ width: \"100%\" }}\n                  contentClassName={Classes.FLEX_EXPANDER}\n               >\n                  <Table2 numRows={draft?.composition.length}>\n                     <Column\n                        name=\"Symbol\"\n                        cellRenderer={(\n                           rowIndex: number,\n                           columnIndex: number\n                        ) => {\n                           return (\n                              <Cell>\n                                 {draft?.composition[rowIndex]?.chemical.name}\n                              </Cell>\n                           )\n                        }}\n                     />\n                     <Column\n                        name=\"Percentage\"\n                        cellRenderer={(\n                           rowIndex: number,\n                           columnIndex: number\n                        ) => {\n                           const composition = draft?.composition\n                           return composition ? (\n                              <EditableCell2\n                                 style={{ fontSize: \"11pt\" }}\n                                 value={composition[rowIndex]?.value.toString()}\n                                 rowIndex={rowIndex}\n                                 onChange={(v, index) => {\n                                    const cmp = [...composition]\n                                    cmp[index!] = {\n                                       ...cmp[index!],\n                                       value: Number(v),\n                                    }\n                                    setEntity(\"composition\", cmp)\n                                 }}\n                              />\n                           ) : (\n                              <Cell />\n                           )\n                        }}\n                     />\n                  </Table2>\n               </FormGroup>\n            </div>\n         </div>\n         <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n               <Button\n                  text=\"Apply\"\n                  intent=\"primary\"\n                  onClick={() => {\n                     if (draft) props.onApply?.(draft)\n                     props.onClose?.()\n                  }}\n               />\n               <Button text=\"Cancel\" onClick={props.onClose} />\n            </div>\n         </div>\n      </Dialog>\n   )\n}\n","import { Button, Card, Classes } from \"@blueprintjs/core\"\nimport {\n   Cell,\n   CellRenderer,\n   Column,\n   EditableCell2,\n   Region,\n   Table2,\n} from \"@blueprintjs/table\"\nimport React, { useCallback, useState } from \"react\"\nimport { useDialog } from \"../../hooks\"\nimport { Ingredient, Variable } from \"../../models/state-model\"\nimport { useApp } from \"../../store/app-context\"\nimport { useSolution } from \"../../store/solution-context\"\nimport { IngredientDialog } from \"./IngredientDialog\"\n\nlet id = 0\n\nconst createIngredient = (): Ingredient => ({\n   id: `${++id}`,\n   name: `Ingredient${id}`,\n   content: 100000,\n   countable: false,\n   pertPercentage: 0,\n   price: 6000000,\n   composition: [],\n})\n\nexport const Ingredients = () => {\n   const {\n      store: { chemicals },\n   } = useApp()\n   const {\n      store: { variables },\n      dispatch,\n   } = useSolution()\n   const [selected, setSelected] = useState<Variable[]>([])\n   const [newPlaceholder, setNewPlaceholder] = useState<\n      Ingredient | undefined\n   >()\n   const editIngredientDialog = useDialog()\n   const deleteIngredients = useCallback(() => {\n      if (selected.length) {\n         dispatch({\n            type: \"REMOVE_VARIABLE\",\n            payload: selected.map((v) =>\n               variables.findIndex(\n                  (item) => item.ingredient.id === v.ingredient.id\n               )\n            ),\n         })\n         setSelected([])\n      }\n   }, [variables, dispatch, selected, setSelected])\n   const editIngredientDialog_open = editIngredientDialog.open\n   const addIngredient = useCallback(() => {\n      const val = createIngredient()\n      val.composition = chemicals.map((chemical) => ({ chemical, value: 0 }))\n      setNewPlaceholder(val)\n      editIngredientDialog_open()\n   }, [chemicals, editIngredientDialog_open, setNewPlaceholder])\n   const cellRenderer = useCallback<CellRenderer>(\n      (rowIndex, columnIndex) => {\n         const variable = variables[rowIndex]\n         let propName: \"\" | keyof Variable = \"\"\n         let value = \"\"\n         let editable = false\n         switch (columnIndex) {\n            case 0:\n               value = variable.ingredient.name\n               break\n            case 1:\n               value = variable.ingredient.price.toString()\n               break\n            case 2:\n               propName = \"min\"\n               value = variable.min.toString()\n               editable = true\n               break\n            case 3:\n               propName = \"max\"\n               value = variable.max.toString()\n               editable = true\n               break\n            case 4:\n               propName = \"amount\"\n               value = variable.amount?.toString() ?? \"\"\n               break\n         }\n         return editable ? (\n            <EditableCell2\n               style={{ fontSize: \"11pt\" }}\n               value={value}\n               rowIndex={rowIndex}\n               onChange={(v, index) => {\n                  if (propName) {\n                     dispatch({\n                        type: \"EDIT_VARIABLE\",\n                        payload: {\n                           index,\n                           data: {\n                              ...variable,\n                              [propName]: Number(v),\n                           },\n                        },\n                     })\n                  }\n               }}\n            />\n         ) : (\n            <Cell style={{ fontSize: \"11pt\" }}>{value}</Cell>\n         )\n      },\n      [variables, dispatch]\n   )\n   const onSelection = useCallback(\n      (selectedRegions: Region[]) => {\n         setSelected(\n            selectedRegions.flatMap((region) => {\n               if (region.rows) {\n                  const [start, end] = region.rows\n                  return variables.slice(start, end + 1)\n               } else {\n                  return []\n               }\n            })\n         )\n      },\n      [variables]\n   )\n   const onApply = useCallback(\n      (ingredient: Ingredient) => {\n         if (newPlaceholder) {\n            dispatch({\n               type: \"ADD_VARIABLE\",\n               payload: {\n                  ingredient,\n                  min: 0,\n                  max: ingredient.content,\n               },\n            })\n            setNewPlaceholder(undefined)\n         } else {\n            const index = variables.findIndex(\n               (item) => item.ingredient.id === ingredient.id\n            )\n            dispatch({\n               type: \"EDIT_VARIABLE\",\n               payload: {\n                  index,\n                  data: {\n                     ingredient,\n                  },\n               },\n            })\n         }\n      },\n      [variables, dispatch, newPlaceholder, setNewPlaceholder]\n   )\n   return (\n      <>\n         <IngredientDialog\n            data={newPlaceholder ?? selected[0]?.ingredient}\n            isOpen={editIngredientDialog.isOpen}\n            onClose={() => {\n               setNewPlaceholder(undefined)\n               editIngredientDialog.close()\n            }}\n            onApply={onApply}\n         />\n         <Card\n            style={{\n               width: \"100%\",\n               height: \"100%\",\n               display: \"flex\",\n               flexDirection: \"column\",\n            }}\n         >\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n               <Button\n                  disabled={selected.length !== 1}\n                  text=\"Edit\"\n                  onClick={editIngredientDialog.open}\n               />\n               <Button text=\"Add\" intent=\"primary\" onClick={addIngredient} />\n               <Button\n                  disabled={!selected.length}\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={deleteIngredients}\n               />\n            </div>\n            <span style={{ display: \"block\", height: \"10px\" }} />\n            <div style={{ flex: 1 }}>\n               <Table2\n                  numRows={variables.length}\n                  enableRowResizing={false}\n                  defaultRowHeight={25}\n                  onSelection={onSelection}\n                  enableColumnResizing={false}\n               >\n                  <Column name=\"Name\" cellRenderer={cellRenderer} />\n                  <Column name=\"Price\" cellRenderer={cellRenderer} />\n                  <Column name=\"Min\" cellRenderer={cellRenderer} />\n                  <Column name=\"Max\" cellRenderer={cellRenderer} />\n                  <Column name=\"Amount\" cellRenderer={cellRenderer} />\n               </Table2>\n            </div>\n         </Card>\n      </>\n   )\n}\n","import { Solution } from \"../models/state-model\"\nimport { init } from \"./solution-context\"\n\nexport const reducer = (state: Solution, action: any): Solution => {\n   switch (action.type) {\n      case \"ADD_CONSTRAINT\": {\n         const constraints = [...state.constraints, action.payload]\n         return {\n            ...state,\n            constraints,\n            status: \"unsolved\",\n         }\n      }\n      case \"EDIT_CONSTRAINT\": {\n         const constraints = [...state.constraints]\n         const item = constraints[action.payload.index]\n         constraints[action.payload.index] = { ...item, ...action.payload.data }\n         return { ...state, constraints, status: \"unsolved\" }\n      }\n      case \"REMOVE_CONSTRAINT\": {\n         const constraints = [...state.constraints]\n         constraints.splice(action.payload, 1)\n         return { ...state, constraints, status: \"unsolved\" }\n      }\n      case \"ADD_VARIABLE\": {\n         const variables = [...state.variables, action.payload]\n         return {\n            ...state,\n            variables,\n         }\n      }\n      case \"EDIT_VARIABLE\": {\n         const variables = [...state.variables]\n         const item = variables[action.payload.index]\n         variables[action.payload.index] = { ...item, ...action.payload.data }\n         return { ...state, variables, status: \"unsolved\" }\n      }\n      case \"REMOVE_VARIABLE\": {\n         const variables = state.variables.filter(\n            (_, i) => !action.payload.includes(i)\n         )\n         return { ...state, variables, status: \"unsolved\" }\n      }\n      case \"SET_RULES\":\n         return {\n            ...state,\n            rules: { ...state.rules, ...action.payload },\n            status: \"unsolved\",\n         }\n      case \"SOLVE\":\n         return {\n            ...state,\n            status: action.payload.status,\n            cost: action.payload.cost,\n            weight: action.payload.weight,\n            variables: state.variables.map((v, i) => ({\n               ...v,\n               amount: action.payload.variables[i],\n            })),\n            constraints: state.constraints.map((v, i) => {\n               return {\n                  ...v,\n                  isSatisfied:\n                     action.payload.constraints[i] <= v.max &&\n                     action.payload.constraints[i] >= v.min,\n                  value: action.payload.constraints[i],\n               }\n            }),\n         }\n      case \"RESET\":\n         return init()\n      default:\n         return state\n   }\n}\n","import \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\"\nimport \"@blueprintjs/table/lib/css/table.css\"\nimport React, { useReducer } from \"react\"\nimport \"./App.css\"\nimport { CalculationCard } from \"./features/calculation/CalculationCard\"\nimport { ResultCard } from \"./features/calculation/ResultCard\"\nimport { ConstraintsDialog } from \"./features/constraint/ConstraintsDialog\"\nimport { Ingredients } from \"./features/ingredient/Ingredients\"\nimport { useDialog } from \"./hooks\"\nimport { AppProvider, init as initApp } from \"./store/app-context\"\nimport { reducer } from \"./store/reducers\"\nimport {\n   init as initSolution,\n   SolutionProvider,\n} from \"./store/solution-context\"\n\nfunction App() {\n   const constraintsDialog = useDialog()\n   const [solution, dispatchSolution] = useReducer(reducer, initSolution())\n   const [app, dispatchApp] = useReducer((state) => {\n      return state\n   }, initApp())\n   return (\n      <AppProvider.Provider value={{ store: app, dispatch: dispatchApp }}>\n         <SolutionProvider.Provider\n            value={{ store: solution, dispatch: dispatchSolution }}\n         >\n            <div className=\"main\">\n               <ConstraintsDialog\n                  isOpen={constraintsDialog.isOpen}\n                  onClose={constraintsDialog.close}\n               />\n               <div style={{ display: \"flex\" }}>\n                  <div style={{ flexGrow: 0 }}>\n                     <CalculationCard\n                        openConstraints={constraintsDialog.open}\n                     />\n                     <span\n                        style={{\n                           display: \"block\",\n                           height: \"10px\",\n                           flexShrink: 0,\n                        }}\n                     />\n                     <ResultCard />\n                  </div>\n                  <span style={{ width: \"10px\", flexShrink: 0 }} />\n                  <div style={{ flex: 1 }}>\n                     <Ingredients />\n                  </div>\n               </div>\n            </div>\n         </SolutionProvider.Provider>\n      </AppProvider.Provider>\n   )\n}\n\nexport default App\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      import(\"web-vitals\").then(\n         ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n         }\n      )\n   }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}